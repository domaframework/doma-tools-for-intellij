/**
* Method parameter type checking: Error cases
* Error: Function [functionName] parameter type mismatch. Actual types: ([actual Types]]) Definition candidates: [functionName]([definition Types])
*/
SELECT *
  FROM employee
 WHERE
       -- Static method parameter type check
       id = /* @doma.example.entity.Project@<error descr="Function getEmployee parameter type mismatch. Actual types: (String)Definition candidates:  getEmployee(Float, Integer)  getEmployee(int)  getEmployee(Employee)">getEmployee</error>(employee.employeeName) */0
    -- Instance method parameter type check
    OR id = /* employee.<error descr="Function employeeParam parameter type mismatch. Actual types: (Integer, Integer)Definition candidates:  employeeParam(String, Integer)  employeeParam(int, Float)">employeeParam</error>(employee.managerId, project.projectId) */0
   -- Custom function parameter type check
   AND cost = /* @<error descr="Function isGuestInProject parameter type mismatch. Actual types: (Integer)Definition candidates:  isGuestInProject(Project)">isGuestInProject</error>(project.cost) */false
    -- Built-in function parameter check
    OR cost = /* @<error descr="Function isNotEmpty parameter type mismatch. Actual types: (Integer)Definition candidates:  isNotEmpty(CharSequence)  isNotEmpty(CharSequence)">isNotEmpty</error>(project.projectId) */false
   /** Parameter type check for methods called in the middle */
   -- Static method
   AND id = /* @doma.example.entity.Project@manager.<error descr="Function processText parameter type mismatch. Actual types: (Employee)Definition candidates:  processText(CharSequence)">processText</error>(employee).indent("indent") */0
    -- Instance method
    OR id = /* employee.projects.get(0).<error descr="The field or method [getEmployeeName] does not exist in the class [Project]">getEmployeeName</error>(employee.employeeName).cost */0
   /**
   * Parameter type check for methods called within parameters
   */
   -- Static method * Instance method
   AND static = /* @doma.example.entity.Project@getEmployee(employee.<error descr="Function employeeParam parameter type mismatch. Actual types: (Integer, String)Definition candidates:  employeeParam(String, Integer)  employeeParam(int, Float)">employeeParam</error>(employee.managerId, project.projectCategory)) */0
    OR static = /* @doma.example.entity.Project@<error descr="Function getEmployee parameter type mismatch. Actual types: ()Definition candidates:  getEmployee(Float, Integer)  getEmployee(int)  getEmployee(Employee)">getEmployee</error>(@doma.example.entity.DummyProject@<error descr="Function getEmployee parameter type mismatch. Actual types: (String)Definition candidates:  getEmployee(Float, Integer)  getEmployee(int)  getEmployee(Employee)">getEmployee</error>(subProject.projectCategory)) */0
    OR static = /* @doma.example.entity.Project@<error descr="Function getEmployee parameter type mismatch. Actual types: ()Definition candidates:  getEmployee(Float, Integer)  getEmployee(int)  getEmployee(Employee)">getEmployee</error>(@<error descr="Function isGuest parameter type mismatch. Actual types: (String)Definition candidates:  isGuest()  isGuest(Employee)  isGuest(Project)">isGuest</error>(employee.employeeName)) */0
    OR static = /* @doma.example.entity.Project@<error descr="Function getEmployee parameter type mismatch. Actual types: ()Definition candidates:  getEmployee(Float, Integer)  getEmployee(int)  getEmployee(Employee)">getEmployee</error>(@<error descr="Function isNotBlank parameter type mismatch. Actual types: (Integer)Definition candidates:  isNotBlank(CharSequence)  isNotBlank(CharSequence)">isNotBlank</error>(employee.managerId)) */0
   -- Instance method
   AND fields = /* employee.<error descr="Function employeeParam parameter type mismatch. Actual types: (Employee, String)Definition candidates:  employeeParam(String, Integer)  employeeParam(int, Float)">employeeParam</error>(employee.<error descr="Function employeeParam parameter type mismatch. Actual types: (Integer, Integer)Definition candidates:  employeeParam(String, Integer)  employeeParam(int, Float)">employeeParam</error>(employee.managerId, project.projectId), "instance") */0
    OR fields = /* employee.<error descr="Function employeeParam parameter type mismatch. Actual types: (String)Definition candidates:  employeeParam(String, Integer)  employeeParam(int, Float)">employeeParam</error>(@doma.example.entity.DummyProject@<error descr="Function getEmployee parameter type mismatch. Actual types: (String)Definition candidates:  getEmployee(Float, Integer)  getEmployee(int)  getEmployee(Employee)">getEmployee</error>(subProject.projectCategory), "static") */0
    OR fields = /* employee.<error descr="Function employeeParam parameter type mismatch. Actual types: (String)Definition candidates:  employeeParam(String, Integer)  employeeParam(int, Float)">employeeParam</error>("custom", @<error descr="Function isGuest parameter type mismatch. Actual types: (String)Definition candidates:  isGuest()  isGuest(Employee)  isGuest(Project)">isGuest</error>(employee.employeeName)) */0
    OR fields = /* employee.<error descr="Function employeeParam parameter type mismatch. Actual types: (String)Definition candidates:  employeeParam(String, Integer)  employeeParam(int, Float)">employeeParam</error>("built", @<error descr="Function isNotBlank parameter type mismatch. Actual types: (Integer)Definition candidates:  isNotBlank(CharSequence)  isNotBlank(CharSequence)">isNotBlank</error>(employee.managerId)) */0
   -- Custom function * Instance method
   AND custom = /* @<error descr="Function isGuestInProject parameter type mismatch. Actual types: (Employee)Definition candidates:  isGuestInProject(Project)">isGuestInProject</error>(employee.<error descr="Function employeeParam parameter type mismatch. Actual types: (Integer, Integer)Definition candidates:  employeeParam(String, Integer)  employeeParam(int, Float)">employeeParam</error>(employee.managerId, project.projectId)) */false
    OR custom = /* @<error descr="Function isGuestInProject parameter type mismatch. Actual types: ()Definition candidates:  isGuestInProject(Project)">isGuestInProject</error>(@doma.example.entity.DummyProject@<error descr="Function getEmployee parameter type mismatch. Actual types: (String)Definition candidates:  getEmployee(Float, Integer)  getEmployee(int)  getEmployee(Employee)">getEmployee</error>(subProject.projectCategory)) */false
    OR custom = /* @<error descr="Function isGuestInProject parameter type mismatch. Actual types: ()Definition candidates:  isGuestInProject(Project)">isGuestInProject</error>(@<error descr="Function isGuest parameter type mismatch. Actual types: (String)Definition candidates:  isGuest()  isGuest(Employee)  isGuest(Project)">isGuest</error>(employee.employeeName)) */false
    OR custom = /* @<error descr="Function isGuestInProject parameter type mismatch. Actual types: ()Definition candidates:  isGuestInProject(Project)">isGuestInProject</error>(@<error descr="Function isNotBlank parameter type mismatch. Actual types: (Integer)Definition candidates:  isNotBlank(CharSequence)  isNotBlank(CharSequence)">isNotBlank</error>(employee.managerId)) */false
   -- Built-in function * Instance method
   AND built = /* @<error descr="Function isNotEmpty parameter type mismatch. Actual types: ()Definition candidates:  isNotEmpty(CharSequence)  isNotEmpty(CharSequence)">isNotEmpty</error>(@doma.example.entity.DummyProject@<error descr="Function getEmployee parameter type mismatch. Actual types: (String)Definition candidates:  getEmployee(Float, Integer)  getEmployee(int)  getEmployee(Employee)">getEmployee</error>(subProject.projectCategory)) */false
    OR built = /* @<error descr="Function isNotEmpty parameter type mismatch. Actual types: (Employee)Definition candidates:  isNotEmpty(CharSequence)  isNotEmpty(CharSequence)">isNotEmpty</error>(employee.<error descr="Function employeeParam parameter type mismatch. Actual types: (Integer, Integer)Definition candidates:  employeeParam(String, Integer)  employeeParam(int, Float)">employeeParam</error>(employee.managerId, project.projectId)) */false
    OR built = /* @<error descr="Function isNotEmpty parameter type mismatch. Actual types: ()Definition candidates:  isNotEmpty(CharSequence)  isNotEmpty(CharSequence)">isNotEmpty</error>(@<error descr="Function isGuest parameter type mismatch. Actual types: (String)Definition candidates:  isGuest()  isGuest(Employee)  isGuest(Project)">isGuest</error>(employee.employeeName)) */false
    OR built = /* @<error descr="Function isNotEmpty parameter type mismatch. Actual types: ()Definition candidates:  isNotEmpty(CharSequence)  isNotEmpty(CharSequence)">isNotEmpty</error>(@<error descr="Function isNotBlank parameter type mismatch. Actual types: (Integer)Definition candidates:  isNotBlank(CharSequence)  isNotBlank(CharSequence)">isNotBlank</error>(employee.managerId)) */false
   /** When there are error parameters in the middle, recognize the types up to the entered field access */
   -- Static method
   AND input = /* @doma.example.entity.Project@<error descr="Function getEmployee parameter type mismatch. Actual types: (Employee, Integer)Definition candidates:  getEmployee(Float, Integer)  getEmployee(int)  getEmployee(Employee)">getEmployee</error>(employee.<error descr="Function processText parameter type mismatch. Actual types: (Integer)Definition candidates:  processText(CharSequence)">processText</error>(employee.managerId), employee.managerId) */0
    OR input = /* employee.<error descr="Function employeeParam parameter type mismatch. Actual types: (Employee, Integer)Definition candidates:  employeeParam(String, Integer)  employeeParam(int, Float)">employeeParam</error>(employee.<error descr="Function processText parameter type mismatch. Actual types: (Integer)Definition candidates:  processText(CharSequence)">processText</error>(employee.managerId), project.projectId) */0
    OR input = /* @<error descr="Function isGuestInProject parameter type mismatch. Actual types: (Employee)Definition candidates:  isGuestInProject(Project)">isGuestInProject</error>(employee.<error descr="Function processText parameter type mismatch. Actual types: (Integer)Definition candidates:  processText(CharSequence)">processText</error>(employee.managerId)) */0
    OR input = /* @<error descr="Function isNotEmpty parameter type mismatch. Actual types: (Employee)Definition candidates:  isNotEmpty(CharSequence)  isNotEmpty(CharSequence)">isNotEmpty</error>(employee.<error descr="Function processText parameter type mismatch. Actual types: (Integer)Definition candidates:  processText(CharSequence)">processText</error>(employee.managerId)) */0
 /** Parameter type check for elements defined in loop directives */
 ORDER BY
         /*%for item : columns */
         /*# item.<error descr="Function getAliasDiv parameter type mismatch. Actual types: (Employee)Definition candidates:  getAliasDiv(int)">getAliasDiv</error>(employee.<error descr="Function employeeParam parameter type mismatch. Actual types: (Integer, Integer)Definition candidates:  employeeParam(String, Integer)  employeeParam(int, Float)">employeeParam</error>(employee.managerId, project.projectId)) */
          , /*# item.<error descr="Function getAliasDiv parameter type mismatch. Actual types: ()Definition candidates:  getAliasDiv(int)">getAliasDiv</error>(@doma.example.entity.DummyProject@<error descr="Function getEmployee parameter type mismatch. Actual types: (String)Definition candidates:  getEmployee(Float, Integer)  getEmployee(int)  getEmployee(Employee)">getEmployee</error>(subProject.projectCategory)) */
          , /*# item.<error descr="Function getAliasDiv parameter type mismatch. Actual types: ()Definition candidates:  getAliasDiv(int)">getAliasDiv</error>(@<error descr="Function isGuest parameter type mismatch. Actual types: (String)Definition candidates:  isGuest()  isGuest(Employee)  isGuest(Project)">isGuest</error>(employee.employeeName)) */
          , /*# item.<error descr="Function getAliasDiv parameter type mismatch. Actual types: ()Definition candidates:  getAliasDiv(int)">getAliasDiv</error>(@<error descr="Function isNotBlank parameter type mismatch. Actual types: (Integer)Definition candidates:  isNotBlank(CharSequence)  isNotBlank(CharSequence)">isNotBlank</error>(employee.managerId)) */
          , /*# item.<error descr="Function getAliasDiv parameter type mismatch. Actual types: (Employee)Definition candidates:  getAliasDiv(int)">getAliasDiv</error>(employee.<error descr="Function processText parameter type mismatch. Actual types: (Integer)Definition candidates:  processText(CharSequence)">processText</error>(employee.managerId)) */
           /*%if item_has_next*/
            ,
           /*%end*/
         /*%end*/
